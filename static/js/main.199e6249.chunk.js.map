{"version":3,"sources":["components/SearchInput.js","components/RecipesListItem.js","components/RecipesList.js","components/Loader.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","props","onSubmit","handleOnSubmit","className","style","justifyContent","type","onChange","event","handleOnChange","value","RecipesListItem","href","url","target","rel","src","thumbnail","alt","title","ingredients","RecipesList","id","recipes","map","recipe","key","Loader","textAlign","width","version","x","y","viewBox","enable-background","fill","d","attributeName","attributeType","dur","from","to","repeatCount","Search","useState","setIngredients","searchString","setSearchString","setRecipes","isLoading","setIsLoading","handleSearchSubmit","a","preventDefault","resetSearch","Axios","get","corsAnywhere","params","i","response","data","results","marginBottom","marginTop","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAsBeA,EApBK,SAAAC,GAClB,OACE,0BAAMC,SAAUD,EAAME,gBACpB,yBAAKC,UAAU,mBAAmBC,MAAO,CAAEC,eAAgB,WACzD,yBAAKF,UAAU,WACb,2BACEA,UAAU,QACVG,KAAK,OACLC,SAAU,SAAAC,GAAK,OAAIR,EAAMS,eAAeD,IACxCE,MAAOV,EAAMU,SAGjB,yBAAKP,UAAU,WACb,4BAAQA,UAAU,kBAAlB,cCMKQ,EAnBS,SAAAX,GACtB,OACE,uBACEY,KAAMZ,EAAMa,IACZC,OAAO,SACPC,IAAI,sBACJZ,UAAU,sBAEV,yBAAKA,UAAU,oBACb,yBAAKa,IAAKhB,EAAMiB,UAAWC,IAAI,MAEjC,yBAAKf,UAAU,kBACb,wBAAIA,UAAU,wBAAwBH,EAAMmB,OAC5C,uBAAGhB,UAAU,8BAA8BH,EAAMoB,gBCQ1CC,G,MAlBK,SAAArB,GAClB,OACE,yBAAKsB,GAAG,gBACLtB,EAAMuB,QAAQC,KAAI,SAAAC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAON,MACZA,MAAOM,EAAON,MACdN,IAAKY,EAAOb,KACZQ,YAAaK,EAAOL,YACpBH,UAAWQ,EAAOR,kBCkBfU,EA/BA,WACb,OACE,yBAAKvB,MAAO,CAAEwB,UAAW,WACvB,yBACExB,MAAO,CAAEyB,MAAO,KAChBC,QAAQ,MACRR,GAAG,KACHS,EAAE,MACFC,EAAE,MACFC,QAAQ,cACRC,oBAAkB,eAElB,0BACEC,KAAK,UACLC,EAAE,kGAEF,sCACEC,cAAc,YACdC,cAAc,MACdhC,KAAK,SACLiC,IAAI,KACJC,KAAK,UACLC,GAAG,YACHC,YAAY,mBC4ETC,EA9FA,WAAO,IAAD,EACmBC,mBAAS,IAD5B,mBACZxB,EADY,KACCyB,EADD,OAEqBD,mBAAS,MAF9B,mBAEZE,EAFY,KAEEC,EAFF,OAGWH,mBAAS,IAHpB,mBAGZrB,EAHY,KAGHyB,EAHG,OAIeJ,oBAAS,GAJxB,mBAIZK,EAJY,KAIDC,EAJC,KAabC,EAAkB,uCAAG,WAAM3C,GAAN,eAAA4C,EAAA,6DACzB5C,EAAM6C,iBAENC,IACAJ,GAAa,GAJY,SAOFK,IAAMC,IAAIC,sEAAyB,CACxDC,OAAQ,CACNC,EAAGvC,KATkB,OAOnBwC,EAPmB,OAazBb,EAAgB3B,GAChByB,EAAe,IACfG,EAAWY,EAASC,KAAKC,SACzBZ,GAAa,GAhBY,4CAAH,sDAmBlBI,EAAc,WAClBP,EAAgB,IAChBF,EAAe,IACfG,EAAW,KAGb,OACE,oCACE,yBAAK7C,UAAU,WACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,MAAMC,MAAO,CAAEwB,UAAW,WACvC,wBAAIzB,UAAU,aAAaC,MAAO,CAAE2D,aAAc,WAAlD,iBAGA,uBAAG3D,MAAO,CAAE2D,aAAc,SAA1B,oDAGA,kBAAC,EAAD,CACErD,MAAOU,EACPX,eA1CoB,SAAAD,GAC9BqC,EAAerC,EAAMM,OAAOJ,QA0ClBR,eAAgBiD,IAElB,uBAAG/C,MAAO,CAAE4D,UAAW,SAAvB,cACc,IACZ,uBACEpD,KAAK,8BACLE,OAAO,SACPC,IAAI,uBAHN,mBAYPkC,EAAY,kBAAC,EAAD,MAAa,KAEzBH,EACC,yBAAK3C,UAAU,WACb,yBAAKA,UAAU,aACZoB,EAAQ0C,OACP,oCACE,wBAAI9D,UAAU,cAAd,wBACwB2C,EADxB,KAGA,kBAAC,EAAD,CAAavB,QAASA,IAAY,KAGpC,oCACE,wBAAIpB,UAAU,cAAd,yBACyB2C,EADzB,QAON,OCnFKoB,G,MARH,WACV,OACE,oCACE,kBAAC,EAAD,SCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.199e6249.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchInput = props => {\n  return (\n    <form onSubmit={props.handleOnSubmit}>\n      <div className=\"field has-addons\" style={{ justifyContent: \"center\" }}>\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            onChange={event => props.handleOnChange(event)}\n            value={props.value}\n          />\n        </div>\n        <div className=\"control\">\n          <button className=\"button is-info\">Search</button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default SearchInput;\n","import React from \"react\";\n\nconst RecipesListItem = props => {\n  return (\n    <a\n      href={props.url}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"box is-flex recipe\"\n    >\n      <div className=\"recipe-thumbnail\">\n        <img src={props.thumbnail} alt=\"\" />\n      </div>\n      <div className=\"recipe-content\">\n        <h3 className=\"recipe-content-title\">{props.title}</h3>\n        <p className=\"recipe-content-ingredients\">{props.ingredients}</p>\n      </div>\n    </a>\n  );\n};\n\nexport default RecipesListItem;\n","import React from \"react\";\nimport RecipesListItem from \"./RecipesListItem\";\n\nimport \"./recipes-list.scss\";\n\nconst RecipesList = props => {\n  return (\n    <div id=\"recipes-list\">\n      {props.recipes.map(recipe => {\n        return (\n          <RecipesListItem\n            key={recipe.title}\n            title={recipe.title}\n            url={recipe.href}\n            ingredients={recipe.ingredients}\n            thumbnail={recipe.thumbnail}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default RecipesList;\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <svg\r\n        style={{ width: 100 }}\r\n        version=\"1.1\"\r\n        id=\"L9\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n        viewBox=\"0 0 100 100\"\r\n        enable-background=\"new 0 0 0 0\"\r\n      >\r\n        <path\r\n          fill=\"#209cee\"\r\n          d=\"M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50\"\r\n        >\r\n          <animateTransform\r\n            attributeName=\"transform\"\r\n            attributeType=\"XML\"\r\n            type=\"rotate\"\r\n            dur=\"1s\"\r\n            from=\"0 50 50\"\r\n            to=\"360 50 50\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </path>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useState } from \"react\";\nimport Axios from \"axios\";\n\nimport SearchInput from \"./SearchInput\";\nimport RecipesList from \"./RecipesList\";\nimport Loader from \"./Loader\";\n\nconst Search = () => {\n  const [ingredients, setIngredients] = useState(\"\");\n  const [searchString, setSearchString] = useState(null);\n  const [recipes, setRecipes] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const corsAnywhere = \"https://cors-anywhere.herokuapp.com/\";\n  const API_HOST = \"http://www.recipepuppy.com/api/\";\n\n  const handleSearchInputChange = event => {\n    setIngredients(event.target.value);\n  };\n\n  const handleSearchSubmit = async event => {\n    event.preventDefault();\n\n    resetSearch();\n    setIsLoading(true);\n\n    // recipepuppy doesn't allow cors, use corsAnywhere for testing\n    const response = await Axios.get(corsAnywhere + API_HOST, {\n      params: {\n        i: ingredients\n      }\n    });\n\n    setSearchString(ingredients);\n    setIngredients(\"\");\n    setRecipes(response.data.results);\n    setIsLoading(false);\n  };\n\n  const resetSearch = () => {\n    setSearchString(\"\");\n    setIngredients(\"\");\n    setRecipes(\"\");\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\" style={{ textAlign: \"center\" }}>\n            <h1 className=\"title is-2\" style={{ marginBottom: \"0.5rem\" }}>\n              Recipe finder\n            </h1>\n            <p style={{ marginBottom: \"1rem\" }}>\n              Enter a list of ingredients, seperated by commas\n            </p>\n            <SearchInput\n              value={ingredients}\n              handleOnChange={handleSearchInputChange}\n              handleOnSubmit={handleSearchSubmit}\n            />\n            <p style={{ marginTop: \"1rem\" }}>\n              Recipes via{\" \"}\n              <a\n                href=\"http://www.recipepuppy.com/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                RecipePuppy\n              </a>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {isLoading ? <Loader /> : null}\n\n      {searchString ? (\n        <div className=\"section\">\n          <div className=\"container\">\n            {recipes.length ? (\n              <>\n                <h3 className=\"title is-3\">\n                  Showing recipes for \"{searchString}\"\n                </h3>\n                <RecipesList recipes={recipes} />{\" \"}\n              </>\n            ) : (\n              <>\n                <h3 className=\"title is-3\">\n                  No results found for \"{searchString}\"\n                </h3>\n              </>\n            )}\n          </div>\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport Search from \"./components/Search\";\n\nimport \"bulma\";\n\nconst App = () => {\n  return (\n    <>\n      <Search />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}