{"version":3,"sources":["components/SearchInput.js","components/RecipesListItem.js","components/RecipesList.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","props","onSubmit","handleOnSubmit","className","style","justifyContent","type","onChange","event","handleOnChange","value","RecipesListItem","href","url","target","rel","src","thumbnail","alt","title","ingredients","RecipesList","recipes","map","recipe","key","Search","useState","setIngredients","setRecipes","preventDefault","Axios","get","corsAnywhere","params","i","then","response","data","results","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kPAsBeA,EApBK,SAAAC,GAClB,OACE,0BAAMC,SAAUD,EAAME,gBACpB,yBAAKC,UAAU,mBAAmBC,MAAO,CAAEC,eAAgB,WACzD,yBAAKF,UAAU,WACb,2BACEA,UAAU,QACVG,KAAK,OACLC,SAAU,SAAAC,GAAK,OAAIR,EAAMS,eAAeD,IACxCE,MAAOV,EAAMU,SAGjB,yBAAKP,UAAU,WACb,4BAAQA,UAAU,kBAAlB,cCQKQ,G,MAnBS,SAAAX,GACtB,OACE,uBACEY,KAAMZ,EAAMa,IACZC,OAAO,SACPC,IAAI,sBACJZ,UAAU,sBAEV,yBAAKA,UAAU,oBACb,yBAAKa,IAAKhB,EAAMiB,UAAWC,IAAI,MAEjC,yBAAKf,UAAU,kBACb,wBAAIA,UAAU,wBAAwBH,EAAMmB,OAC5C,uBAAGhB,UAAU,8BAA8BH,EAAMoB,iBCI1CC,EAlBK,SAAArB,GAClB,OACE,6BACGA,EAAMsB,QAAQC,KAAI,SAAAC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAOL,MACZA,MAAOK,EAAOL,MACdN,IAAKW,EAAOZ,KACZQ,YAAaI,EAAOJ,YACpBH,UAAWO,EAAOP,iBCsCfS,EA7CA,WAAO,IAAD,EACmBC,mBAAS,IAD5B,mBACZP,EADY,KACCQ,EADD,OAEWD,mBAAS,IAFpB,mBAEZL,EAFY,KAEHO,EAFG,KAuBnB,OACE,oCACE,yBAAK1B,UAAU,WACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEO,MAAOU,EACPX,eAzBsB,SAAAD,GAC9BoB,EAAepB,EAAMM,OAAOJ,QAyBpBR,eAtBiB,SAAAM,GACzBA,EAAMsB,iBAKNC,IAAMC,IAAIC,sEAAkD,CAC1DC,OAAQ,CACNC,EAAGf,KAEJgB,MAAK,SAAAC,GACNR,EAAWQ,EAASC,KAAKC,iBAexBjB,EAAQkB,OACP,yBAAKrC,UAAU,WACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAamB,QAASA,MAGxB,OCjCKmB,G,MARH,WACV,OACE,oCACE,kBAAC,EAAD,SCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.c8efbf93.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchInput = props => {\n  return (\n    <form onSubmit={props.handleOnSubmit}>\n      <div className=\"field has-addons\" style={{ justifyContent: \"center\" }}>\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            onChange={event => props.handleOnChange(event)}\n            value={props.value}\n          />\n        </div>\n        <div className=\"control\">\n          <button className=\"button is-info\">Search</button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default SearchInput;\n","import React from \"react\";\n\nimport \"./recipesListItem.scss\";\n\nconst RecipesListItem = props => {\n  return (\n    <a\n      href={props.url}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"box is-flex recipe\"\n    >\n      <div className=\"recipe-thumbnail\">\n        <img src={props.thumbnail} alt=\"\" />\n      </div>\n      <div className=\"recipe-content\">\n        <h3 className=\"recipe-content-title\">{props.title}</h3>\n        <p className=\"recipe-content-ingredients\">{props.ingredients}</p>\n      </div>\n    </a>\n  );\n};\n\nexport default RecipesListItem;\n","import React from \"react\";\nimport RecipesListItem from \"./RecipesListItem\";\n\nconst RecipesList = props => {\n  return (\n    <div>\n      {props.recipes.map(recipe => {\n        return (\n          <RecipesListItem\n            key={recipe.title}\n            title={recipe.title}\n            url={recipe.href}\n            ingredients={recipe.ingredients}\n            thumbnail={recipe.thumbnail}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default RecipesList;\n","import React, { useState } from \"react\";\nimport Axios from \"axios\";\n\nimport SearchInput from \"./SearchInput\";\nimport RecipesList from \"./RecipesList\";\n\nconst Search = () => {\n  const [ingredients, setIngredients] = useState(\"\");\n  const [recipes, setRecipes] = useState([]);\n\n  const handleSearchInputChange = event => {\n    setIngredients(event.target.value);\n  };\n\n  const handleSearchSubmit = event => {\n    event.preventDefault();\n\n    // recipepuppy doesn't allow cors, use this proxy for testing\n    const corsAnywhere = \"https://cors-anywhere.herokuapp.com/\";\n\n    Axios.get(corsAnywhere + \"http://www.recipepuppy.com/api/\", {\n      params: {\n        i: ingredients\n      }\n    }).then(response => {\n      setRecipes(response.data.results);\n    });\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <SearchInput\n            value={ingredients}\n            handleOnChange={handleSearchInputChange}\n            handleOnSubmit={handleSearchSubmit}\n          />\n        </div>\n      </div>\n      {recipes.length ? (\n        <div className=\"section\">\n          <div className=\"container\">\n            <RecipesList recipes={recipes} />\n          </div>\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport Search from \"./components/Search\";\n\nimport \"bulma\";\n\nconst App = () => {\n  return (\n    <>\n      <Search />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}